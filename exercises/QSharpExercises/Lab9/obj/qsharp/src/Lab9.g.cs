//------------------------------------------------------------------------------
// <auto-generated>                                                             
//     This code was generated by a tool.                                       
//     Changes to this file may cause incorrect behavior and will be lost if    
//     the code is regenerated.                                                 
// </auto-generated>                                                            
//------------------------------------------------------------------------------
#pragma warning disable 436
#pragma warning disable 162
#pragma warning disable 1591
using System;
using Microsoft.Quantum.Core;
using Microsoft.Quantum.Intrinsic;
using Microsoft.Quantum.Intrinsic.Interfaces;
using Microsoft.Quantum.Simulation.Core;

[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise1\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\BWSI\\\\Exercises\\\\exercises\\\\QSharpExercises\\\\Lab9\\\\Lab9.qs\",\"Position\":{\"Item1\":33,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":10}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":10}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"input\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":9},\"Item2\":{\"Line\":4,\"Column\":14}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"output\"]},\"Type\":{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":5,\"Column\":9},\"Item2\":{\"Line\":5,\"Column\":15}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]},{\"Case\":\"ArrayType\",\"Fields\":[{\"Case\":\"Qubit\"}]}]]},\"ReturnType\":{\"Case\":\"UnitType\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you must implement the quantum modular\",\" exponentiation function: |o> = a^|x> mod b.\",\" |x> and |o> are input and output registers respectively, and a and b\",\" are classical integers.\",\"\",\" # Input\",\" ## a\",\" The base power of the term being exponentiated.\",\"\",\" ## b\",\" The modulus for the function.\",\"\",\" ## input\",\" The register containing a superposition of all of the exponent values\",\" that the user wants to calculate; this superposition is arbitrary.\",\"\",\" ## output\",\" This register must contain the output |o> of the modular\",\" exponentiation function. It will start in the |0...0> state.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise1\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\BWSI\\\\Exercises\\\\exercises\\\\QSharpExercises\\\\Lab9\\\\Lab9.qs\",\"Position\":{\"Item1\":33,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise2\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\BWSI\\\\Exercises\\\\exercises\\\\QSharpExercises\\\\Lab9\\\\Lab9.qs\",\"Position\":{\"Item1\":85,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numberToFactor\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":23}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"guess\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":14}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you must implement the quantum subroutine of Shor's\",\" algorithm. You will be given a number to factor and some guess to a\",\" possible factor - both of which are integers.\",\" You must set up, execute, and measure the quantum circuit.\",\" You should return the fraction that was produced by measuring the\",\" result at the end of the subroutine, in the form of a tuple:\",\" the first value should be the number you measured, and the second\",\" value should be 2^n, where n is the number of qubits you use in your\",\" input register.\",\"\",\" # Input\",\" ## numberToFactor\",\" The number that the user wants to factor. This will become the modulus\",\" for the modular arithmetic used in the subroutine.\",\"\",\" ## guess\",\" The number that's being guessed as a possible factor. This will become\",\" the base of exponentiation for the modular arithmetic used in the\",\" subroutine.\",\"\",\" # Output\",\" A tuple representing the continued fraction approximation that the\",\" subroutine measured. The first value should be the numerator (the\",\" value that was measured from the qubits), and the second value should\",\" be the denominator (the total size of the input space, which is 2^n\",\" where n is the size of your input register).\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise2\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\BWSI\\\\Exercises\\\\exercises\\\\QSharpExercises\\\\Lab9\\\\Lab9.qs\",\"Position\":{\"Item1\":85,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise3\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\BWSI\\\\Exercises\\\\exercises\\\\QSharpExercises\\\\Lab9\\\\Lab9.qs\",\"Position\":{\"Item1\":145,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":19}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numerator\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":18}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"denominator\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":20}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"denominatorThreshold\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":4,\"Column\":9},\"Item2\":{\"Line\":4,\"Column\":29}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you will be given an arbitrary numerator and\",\" denominator for a fraction, along with some threshold value for the\",\" denominator.\",\" Your goal is to return the largest convergent of the continued\",\" fraction that matches the provided number, with the condition that the\",\" denominator of your convergent must be less than the threshold value.\",\"\",\" Using the example from the lecture section, if you are given the\",\" number 341 / 512 with a threshold of 21, the most accurate convergent\",\" that respects this threshold is 2 / 3, so that's what you would return.\",\"\",\" # Input\",\" ## numerator\",\" The numerator of the original fraction\",\"\",\" ## denominator\",\" The denominator of the original fraction\",\"\",\" ## denominatorThreshold\",\" A threshold value for the denominator. The continued fraction\",\" convergent that you find must be less than this value. If it's higher,\",\" you must return the previous convergent.\",\"\",\" # Output\",\" A tuple representing the convergent that you found. The first element\",\" should be the numerator, and the second should be the denominator.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise3\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\BWSI\\\\Exercises\\\\exercises\\\\QSharpExercises\\\\Lab9\\\\Lab9.qs\",\"Position\":{\"Item1\":145,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise4\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\BWSI\\\\Exercises\\\\exercises\\\\QSharpExercises\\\\Lab9\\\\Lab9.qs\",\"Position\":{\"Item1\":203,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numberToFactor\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":22},\"Item2\":{\"Line\":1,\"Column\":36}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"guess\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":44},\"Item2\":{\"Line\":1,\"Column\":49}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you are given two integers - a number that you want\",\" to find the factors of, and an arbitrary guess as to one of the\",\" factors of the number. This guess was already checked to see if it was\",\" a factor of the number, so you know that it *isn't* a factor. It is\",\" guaranteed to be co-prime with numberToFactor.\",\"\",\" Your job is to find the period of the modular exponentation function\",\" using these two values as the arguments. That is, you must find the\",\" period of the equation y = guess^x mod numberToFactor.\",\"\",\" # Input\",\" ## numberToFactor\",\" The number that the user wants to find the factors for\",\"\",\" ## guess\",\" Some co-prime integer that is smaller than numberToFactor\",\"\",\" # Output\",\" The period of y = guess^x mod numberToFactor.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise4\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\BWSI\\\\Exercises\\\\exercises\\\\QSharpExercises\\\\Lab9\\\\Lab9.qs\",\"Position\":{\"Item1\":203,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"newIOverP\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Transparent\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\BWSI\\\\Exercises\\\\exercises\\\\QSharpExercises\\\\Lab9\\\\Lab9.qs\",\"Position\":{\"Item1\":233,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":21},\"Item2\":{\"Line\":1,\"Column\":22}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":29},\"Item2\":{\"Line\":1,\"Column\":30}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"newIOverP\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\BWSI\\\\Exercises\\\\exercises\\\\QSharpExercises\\\\Lab9\\\\Lab9.qs\",\"Position\":{\"Item1\":233,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":20}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Operation\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"isPeriod\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Empty\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\BWSI\\\\Exercises\\\\exercises\\\\QSharpExercises\\\\Lab9\\\\Lab9.qs\",\"Position\":{\"Item1\":243,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":19}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"a\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":20},\"Item2\":{\"Line\":1,\"Column\":21}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"b\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":27},\"Item2\":{\"Line\":1,\"Column\":28}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"p\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":1,\"Column\":35},\"Item2\":{\"Line\":1,\"Column\":36}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Bool\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"isPeriod\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\BWSI\\\\Exercises\\\\exercises\\\\QSharpExercises\\\\Lab9\\\\Lab9.qs\",\"Position\":{\"Item1\":243,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":11},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
[assembly: CallableDeclaration("{\"Kind\":{\"Case\":\"Function\"},\"QualifiedName\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise5\"},\"Attributes\":[{\"TypeId\":{\"Case\":\"Value\",\"Fields\":[{\"Namespace\":\"Microsoft.Quantum.Targeting\",\"Name\":\"RequiresCapability\",\"Range\":{\"Case\":\"Null\"}}]},\"TypeIdRange\":{\"Case\":\"Null\"},\"Argument\":{\"Item1\":{\"Case\":\"ValueTuple\",\"Fields\":[[{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Opaque\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Full\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},{\"Item1\":{\"Case\":\"StringLiteral\",\"Fields\":[\"Inferred automatically by the compiler.\",[]]},\"Item2\":[],\"Item3\":{\"Case\":\"String\"},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}}]]},\"Item2\":[],\"Item3\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"String\"},{\"Case\":\"String\"},{\"Case\":\"String\"}]]},\"Item4\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Item5\":{\"Case\":\"Null\"}},\"Offset\":{\"Item1\":0,\"Item2\":0},\"Comments\":{\"OpeningComments\":[],\"ClosingComments\":[]}}],\"Modifiers\":{\"Access\":{\"Case\":\"DefaultAccess\"}},\"SourceFile\":\"D:\\\\BWSI\\\\Exercises\\\\exercises\\\\QSharpExercises\\\\Lab9\\\\Lab9.qs\",\"Position\":{\"Item1\":271,\"Item2\":4},\"SymbolRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":19}},\"ArgumentTuple\":{\"Case\":\"QsTuple\",\"Fields\":[[{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"numberToFactor\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":2,\"Column\":9},\"Item2\":{\"Line\":2,\"Column\":23}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"guess\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":9},\"Item2\":{\"Line\":3,\"Column\":14}}}]},{\"Case\":\"QsTupleItem\",\"Fields\":[{\"VariableName\":{\"Case\":\"ValidName\",\"Fields\":[\"period\"]},\"Type\":{\"Case\":\"Int\"},\"InferredInformation\":{\"IsMutable\":false,\"HasLocalQuantumDependency\":false},\"Position\":{\"Case\":\"Null\"},\"Range\":{\"Item1\":{\"Line\":3,\"Column\":22},\"Item2\":{\"Line\":3,\"Column\":28}}}]}]]},\"Signature\":{\"TypeParameters\":[],\"ArgumentType\":{\"Case\":\"TupleType\",\"Fields\":[[{\"Case\":\"Int\"},{\"Case\":\"Int\"},{\"Case\":\"Int\"}]]},\"ReturnType\":{\"Case\":\"Int\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}}},\"Documentation\":[\" # Summary\",\" In this exercise, you are given a number to find the factors of,\",\" a guess of a factor (which is guaranteed to be co-prime), and the\",\" period of the modular exponentiation function that you found in\",\" Exercise 4.\",\"\",\" Your goal is to use the period to find a factor of the number if\",\" possible.\",\"\",\" # Input\",\" ## numberToFactor\",\" The number to find a factor of\",\"\",\" ## guess\",\" A co-prime number that is *not* a factor\",\"\",\" ## period\",\" The period of the function y = guess^x mod numberToFactor.\",\"\",\" # Output\",\" - If you can find a factor, return that factor.\",\" - If the period is odd, return -1.\",\" - If the period doesn't work for factoring, return -2.\"]}")]
[assembly: SpecializationDeclaration("{\"Kind\":{\"Case\":\"QsBody\"},\"TypeArguments\":{\"Case\":\"Null\"},\"Information\":{\"Characteristics\":{\"Case\":\"EmptySet\"},\"InferredInformation\":{\"IsSelfAdjoint\":false,\"IsIntrinsic\":false}},\"Parent\":{\"Namespace\":\"Lab9\",\"Name\":\"Exercise5\"},\"Attributes\":[],\"SourceFile\":\"D:\\\\BWSI\\\\Exercises\\\\exercises\\\\QSharpExercises\\\\Lab9\\\\Lab9.qs\",\"Position\":{\"Item1\":271,\"Item2\":4},\"HeaderRange\":{\"Item1\":{\"Line\":1,\"Column\":10},\"Item2\":{\"Line\":1,\"Column\":19}},\"Documentation\":[]}")]
#line hidden
namespace Lab9
{
    [SourceLocation("D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs", OperationFunctor.Body, 34, 86)]
    public partial class Exercise1 : Operation<(Int64,Int64,IQArray<Qubit>,IQArray<Qubit>), QVoid>, ICallable
    {
        public Exercise1(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,IQArray<Qubit>,IQArray<Qubit>)>, IApplyData
        {
            public In((Int64,Int64,IQArray<Qubit>,IQArray<Qubit>) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits
            {
                get
                {
                    return Qubit.Concat(((IApplyData)Data.Item3)?.Qubits, ((IApplyData)Data.Item4)?.Qubits);
                }
            }
        }

        String ICallable.Name => "Exercise1";
        String ICallable.FullName => "Lab9.Exercise1";
        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__LittleEndian
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__X
        {
            get;
            set;
        }

        protected IUnitary<(Int64,Int64,Microsoft.Quantum.Arithmetic.LittleEndian)> Microsoft__Quantum__Arithmetic__MultiplyByModularInteger
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,Int64), Int64> Microsoft__Quantum__Math__ExpModI
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,IQArray<Qubit>,IQArray<Qubit>), QVoid> __Body__ => (__in__) =>
        {
            var (a,b,input,output) = __in__;
#line 46 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            var leo = new Microsoft.Quantum.Arithmetic.LittleEndian(output);
#line 47 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            var N = input.Length;
#line 48 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            Microsoft__Quantum__Intrinsic__X.Apply(output[(output.Length - 1L)]);
#line 51 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            foreach (var i in new QRange(0L, (N - 1L)))
#line hidden
            {
#line 52 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                var qubit = input[i];
#line 53 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                Microsoft__Quantum__Arithmetic__MultiplyByModularInteger.Controlled.Apply((new QArray<Qubit>(qubit), (Microsoft__Quantum__Math__ExpModI.Apply((a, 2L.Pow(((N - i) - 1L)), b)), b, leo)));
            }

#line hidden
            return QVoid.Instance;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Arithmetic__LittleEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.LittleEndian));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.Microsoft__Quantum__Intrinsic__X = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.X));
            this.Microsoft__Quantum__Arithmetic__MultiplyByModularInteger = this.__Factory__.Get<IUnitary<(Int64,Int64,Microsoft.Quantum.Arithmetic.LittleEndian)>>(typeof(global::Microsoft.Quantum.Arithmetic.MultiplyByModularInteger));
            this.Microsoft__Quantum__Math__ExpModI = this.__Factory__.Get<ICallable<(Int64,Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.ExpModI));
        }

        public override IApplyData __DataIn__((Int64,Int64,IQArray<Qubit>,IQArray<Qubit>) data) => new In(data);
        public override IApplyData __DataOut__(QVoid data) => data;
        public static System.Threading.Tasks.Task<QVoid> Run(IOperationFactory __m__, Int64 a, Int64 b, IQArray<Qubit> input, IQArray<Qubit> output)
        {
            return __m__.Run<Exercise1, (Int64,Int64,IQArray<Qubit>,IQArray<Qubit>), QVoid>((a, b, input, output));
        }
    }

    [SourceLocation("D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs", OperationFunctor.Body, 86, 146)]
    public partial class Exercise2 : Operation<(Int64,Int64), (Int64,Int64)>, ICallable
    {
        public Exercise2(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        public class Out : QTuple<(Int64,Int64)>, IApplyData
        {
            public Out((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "Exercise2";
        String ICallable.FullName => "Lab9.Exercise2";
        protected ICallable<Double, Int64> Microsoft__Quantum__Math__Ceiling
        {
            get;
            set;
        }

        protected ICallable<Double, Double> Microsoft__Quantum__Math__Lg
        {
            get;
            set;
        }

        protected ICallable<Int64, Double> Microsoft__Quantum__Convert__IntAsDouble
        {
            get;
            set;
        }

        protected Allocate Allocate__
        {
            get;
            set;
        }

        protected Release Release__
        {
            get;
            set;
        }

        protected ICallable Microsoft__Quantum__Canon__ApplyToEach
        {
            get;
            set;
        }

        protected IUnitary<Qubit> Microsoft__Quantum__Intrinsic__H
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.BigEndian> Microsoft__Quantum__Arithmetic__BigEndian
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,IQArray<Qubit>,IQArray<Qubit>), QVoid> Exercise1__
        {
            get;
            set;
        }

        protected IUnitary<Microsoft.Quantum.Arithmetic.BigEndian> Microsoft__Quantum__Canon__QFT
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64> Microsoft__Quantum__Arithmetic__MeasureInteger
        {
            get;
            set;
        }

        protected ICallable<Microsoft.Quantum.Arithmetic.BigEndian, Microsoft.Quantum.Arithmetic.LittleEndian> Microsoft__Quantum__Arithmetic__BigEndianAsLittleEndian
        {
            get;
            set;
        }

        protected ICallable Length__
        {
            get;
            set;
        }

        protected ICallable<IQArray<Qubit>, QVoid> ResetAll__
        {
            get;
            set;
        }

        public override Func<(Int64,Int64), (Int64,Int64)> __Body__ => (__in__) =>
        {
            var (numberToFactor,guess) = __in__;
#line 99 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            var outputSize = Microsoft__Quantum__Math__Ceiling.Apply(Microsoft__Quantum__Math__Lg.Apply(Microsoft__Quantum__Convert__IntAsDouble.Apply((numberToFactor + 1L))));
#line hidden
            {
#line 100 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                var (input,output) = (Allocate__.Apply((outputSize * 2L)), Allocate__.Apply(outputSize));
#line hidden
                bool __arg1__ = true;
                try
                {
#line 102 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                    Microsoft__Quantum__Canon__ApplyToEach.Apply((Microsoft__Quantum__Intrinsic__H, input));
#line 104 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                    var bei = new Microsoft.Quantum.Arithmetic.BigEndian(input);
#line 106 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                    Exercise1__.Apply((guess, numberToFactor, input, output));
#line 108 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                    Microsoft__Quantum__Canon__QFT.Adjoint.Apply(bei);
#line 110 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                    var numerator = Microsoft__Quantum__Arithmetic__MeasureInteger.Apply(Microsoft__Quantum__Arithmetic__BigEndianAsLittleEndian.Apply(bei));
#line 111 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                    var demoninator = 2L.Pow(input.Length);
#line 113 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                    ResetAll__.Apply(output);
#line 115 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                    return (numerator, demoninator);
                }
#line hidden
                catch
                {
                    __arg1__ = false;
                    throw;
                }
#line hidden
                finally
                {
                    if (__arg1__)
                    {
#line hidden
                        Release__.Apply(input);
#line hidden
                        Release__.Apply(output);
                    }
                }
            }
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__Ceiling = this.__Factory__.Get<ICallable<Double, Int64>>(typeof(global::Microsoft.Quantum.Math.Ceiling));
            this.Microsoft__Quantum__Math__Lg = this.__Factory__.Get<ICallable<Double, Double>>(typeof(global::Microsoft.Quantum.Math.Lg));
            this.Microsoft__Quantum__Convert__IntAsDouble = this.__Factory__.Get<ICallable<Int64, Double>>(typeof(global::Microsoft.Quantum.Convert.IntAsDouble));
            this.Allocate__ = this.__Factory__.Get<Allocate>(typeof(global::Microsoft.Quantum.Intrinsic.Allocate));
            this.Release__ = this.__Factory__.Get<Release>(typeof(global::Microsoft.Quantum.Intrinsic.Release));
            this.Microsoft__Quantum__Canon__ApplyToEach = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Canon.ApplyToEach<>));
            this.Microsoft__Quantum__Intrinsic__H = this.__Factory__.Get<IUnitary<Qubit>>(typeof(global::Microsoft.Quantum.Intrinsic.H));
            this.Microsoft__Quantum__Arithmetic__BigEndian = this.__Factory__.Get<ICallable<IQArray<Qubit>, Microsoft.Quantum.Arithmetic.BigEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.BigEndian));
            this.Exercise1__ = this.__Factory__.Get<ICallable<(Int64,Int64,IQArray<Qubit>,IQArray<Qubit>), QVoid>>(typeof(Exercise1));
            this.Microsoft__Quantum__Canon__QFT = this.__Factory__.Get<IUnitary<Microsoft.Quantum.Arithmetic.BigEndian>>(typeof(global::Microsoft.Quantum.Canon.QFT));
            this.Microsoft__Quantum__Arithmetic__MeasureInteger = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.LittleEndian, Int64>>(typeof(global::Microsoft.Quantum.Arithmetic.MeasureInteger));
            this.Microsoft__Quantum__Arithmetic__BigEndianAsLittleEndian = this.__Factory__.Get<ICallable<Microsoft.Quantum.Arithmetic.BigEndian, Microsoft.Quantum.Arithmetic.LittleEndian>>(typeof(global::Microsoft.Quantum.Arithmetic.BigEndianAsLittleEndian));
            this.Length__ = this.__Factory__.Get<ICallable>(typeof(global::Microsoft.Quantum.Core.Length<>));
            this.ResetAll__ = this.__Factory__.Get<ICallable<IQArray<Qubit>, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.ResetAll));
        }

        public override IApplyData __DataIn__((Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__((Int64,Int64) data) => new Out(data);
        public static System.Threading.Tasks.Task<(Int64,Int64)> Run(IOperationFactory __m__, Int64 numberToFactor, Int64 guess)
        {
            return __m__.Run<Exercise2, (Int64,Int64), (Int64,Int64)>((numberToFactor, guess));
        }
    }

    [SourceLocation("D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs", OperationFunctor.Body, 146, 204)]
    public partial class Exercise3 : Function<(Int64,Int64,Int64), (Int64,Int64)>, ICallable
    {
        public Exercise3(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        public class Out : QTuple<(Int64,Int64)>, IApplyData
        {
            public Out((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "Exercise3";
        String ICallable.FullName => "Lab9.Exercise3";
        protected ICallable<String, QVoid> Message__
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,Int64), (Int64,Int64)> __Body__ => (__in__) =>
        {
            var (numerator,denominator,denominatorThreshold) = __in__;
#line 151 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            Message__.Apply(String.Format("Numerator: {0} Denominator: {1} Threshold: {2}", numerator, denominator, denominatorThreshold));
#line 152 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            if ((numerator == 0L))
            {
#line 153 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                return (0L, 1L);
            }

#line 156 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            var Pi = numerator;
#line 157 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            var Qi = denominator;
#line 158 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            var nvals = new QArray<Int64>(1L, 0L);
#line 159 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            var dvals = new QArray<Int64>(0L, 1L);
#line 160 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            var i = 0L;
#line 161 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            var ri = 100L;
#line 162 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            while (((dvals[0L] < denominatorThreshold) && (ri != 0L)))
            {
#line 163 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                var ai = (Pi / Qi);
#line 164 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                ri = (Pi % Qi);
#line 165 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                var tempn = nvals[0L];
#line 166 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                var tempd = dvals[0L];
#line 167 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                nvals.Modify(0L, ((ai * nvals[0L]) + nvals[1L]));
#line 168 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                dvals.Modify(0L, ((ai * dvals[0L]) + dvals[1L]));
#line 169 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                nvals.Modify(1L, tempn);
#line 170 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                dvals.Modify(1L, tempd);
#line 171 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                Pi = Qi;
#line 172 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                Qi = ri;
#line 173 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                i = (i + 1L);
            }

#line 176 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            var ind = 0L;
#line 177 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            if ((dvals[0L] >= denominatorThreshold))
            {
#line 178 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                ind = 1L;
            }

#line 180 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            return (nvals[ind], dvals[ind]);
        }

        ;
        public override void __Init__()
        {
            this.Message__ = this.__Factory__.Get<ICallable<String, QVoid>>(typeof(global::Microsoft.Quantum.Intrinsic.Message));
        }

        public override IApplyData __DataIn__((Int64,Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__((Int64,Int64) data) => new Out(data);
        public static System.Threading.Tasks.Task<(Int64,Int64)> Run(IOperationFactory __m__, Int64 numerator, Int64 denominator, Int64 denominatorThreshold)
        {
            return __m__.Run<Exercise3, (Int64,Int64,Int64), (Int64,Int64)>((numerator, denominator, denominatorThreshold));
        }
    }

    [SourceLocation("D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs", OperationFunctor.Body, 204, 234)]
    public partial class Exercise4 : Operation<(Int64,Int64), Int64>, ICallable
    {
        public Exercise4(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "Exercise4";
        String ICallable.FullName => "Lab9.Exercise4";
        protected ICallable<(Int64,Int64), (Int64,Int64)> newIOverP__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,Int64), Boolean> isPeriod__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64), Int64> Microsoft__Quantum__Math__GreatestCommonDivisorI
        {
            get;
            set;
        }

        public override Func<(Int64,Int64), Int64> __Body__ => (__in__) =>
        {
            var (numberToFactor,guess) = __in__;
#line 214 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            var (_,dOld) = newIOverP__.Apply((numberToFactor, guess));
#line 215 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            if (isPeriod__.Apply((guess, numberToFactor, dOld)))
            {
#line 216 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                return dOld;
            }

#line 218 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            var dNew = 0L;
#line 219 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            while (true)
            {
#line 220 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                var (_,newD) = newIOverP__.Apply((numberToFactor, guess));
#line 221 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                dNew = newD;
                if ((dOld != dNew))
                {
                    break;
                }
                else
                {
                }
            }

#line 223 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            if (isPeriod__.Apply((guess, numberToFactor, dNew)))
            {
#line 224 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                return dNew;
            }

#line 226 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            while (true)
            {
#line 227 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                var temp = dNew;
#line 228 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                dNew = ((dOld * dNew) / Microsoft__Quantum__Math__GreatestCommonDivisorI.Apply((dOld, dNew)));
#line 229 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                dOld = temp;
                if (isPeriod__.Apply((guess, numberToFactor, dNew)))
                {
                    break;
                }
                else
                {
                }
            }

#line 231 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            return dNew;
        }

        ;
        public override void __Init__()
        {
            this.newIOverP__ = this.__Factory__.Get<ICallable<(Int64,Int64), (Int64,Int64)>>(typeof(newIOverP));
            this.isPeriod__ = this.__Factory__.Get<ICallable<(Int64,Int64,Int64), Boolean>>(typeof(isPeriod));
            this.Microsoft__Quantum__Math__GreatestCommonDivisorI = this.__Factory__.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.GreatestCommonDivisorI));
        }

        public override IApplyData __DataIn__((Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 numberToFactor, Int64 guess)
        {
            return __m__.Run<Exercise4, (Int64,Int64), Int64>((numberToFactor, guess));
        }
    }

    [SourceLocation("D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs", OperationFunctor.Body, 234, 244)]
    public partial class newIOverP : Operation<(Int64,Int64), (Int64,Int64)>, ICallable
    {
        public newIOverP(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        public class Out : QTuple<(Int64,Int64)>, IApplyData
        {
            public Out((Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "newIOverP";
        String ICallable.FullName => "Lab9.newIOverP";
        protected ICallable<(Int64,Int64), (Int64,Int64)> Exercise2__
        {
            get;
            set;
        }

        protected ICallable<(Int64,Int64,Int64), (Int64,Int64)> Exercise3__
        {
            get;
            set;
        }

        public override Func<(Int64,Int64), (Int64,Int64)> __Body__ => (__in__) =>
        {
            var (b,a) = __in__;
#line 235 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            while (true)
            {
#line 236 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                var (xi,twoToTheN) = Exercise2__.Apply((b, a));
#line 237 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                if ((xi > 0L))
                {
#line 238 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                    return Exercise3__.Apply((xi, twoToTheN, b));
                }

                if (false)
                {
                    break;
                }
                else
                {
                }
            }

#line 241 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            return (0L, 0L);
        }

        ;
        public override void __Init__()
        {
            this.Exercise2__ = this.__Factory__.Get<ICallable<(Int64,Int64), (Int64,Int64)>>(typeof(Exercise2));
            this.Exercise3__ = this.__Factory__.Get<ICallable<(Int64,Int64,Int64), (Int64,Int64)>>(typeof(Exercise3));
        }

        public override IApplyData __DataIn__((Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__((Int64,Int64) data) => new Out(data);
        public static System.Threading.Tasks.Task<(Int64,Int64)> Run(IOperationFactory __m__, Int64 b, Int64 a)
        {
            return __m__.Run<newIOverP, (Int64,Int64), (Int64,Int64)>((b, a));
        }
    }

    [SourceLocation("D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs", OperationFunctor.Body, 244, 272)]
    public partial class isPeriod : Operation<(Int64,Int64,Int64), Boolean>, ICallable
    {
        public isPeriod(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "isPeriod";
        String ICallable.FullName => "Lab9.isPeriod";
        public override Func<(Int64,Int64,Int64), Boolean> __Body__ => (__in__) =>
        {
            var (a,b,p) = __in__;
#line 245 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            return ((a.Pow(p) % b) == 1L);
        }

        ;
        public override void __Init__()
        {
        }

        public override IApplyData __DataIn__((Int64,Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__(Boolean data) => new QTuple<Boolean>(data);
        public static System.Threading.Tasks.Task<Boolean> Run(IOperationFactory __m__, Int64 a, Int64 b, Int64 p)
        {
            return __m__.Run<isPeriod, (Int64,Int64,Int64), Boolean>((a, b, p));
        }
    }

    [SourceLocation("D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs", OperationFunctor.Body, 272, -1)]
    public partial class Exercise5 : Function<(Int64,Int64,Int64), Int64>, ICallable
    {
        public Exercise5(IOperationFactory m) : base(m)
        {
        }

        public class In : QTuple<(Int64,Int64,Int64)>, IApplyData
        {
            public In((Int64,Int64,Int64) data) : base(data)
            {
            }

            System.Collections.Generic.IEnumerable<Qubit> IApplyData.Qubits => null;
        }

        String ICallable.Name => "Exercise5";
        String ICallable.FullName => "Lab9.Exercise5";
        protected ICallable<(Int64,Int64), Int64> Microsoft__Quantum__Math__GreatestCommonDivisorI
        {
            get;
            set;
        }

        public override Func<(Int64,Int64,Int64), Int64> __Body__ => (__in__) =>
        {
            var (numberToFactor,guess,period) = __in__;
#line 277 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            if (((period % 2L) != 0L))
            {
#line 278 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                return -(1L);
            }

#line 281 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            var (aRaisedToThePOverTwoMinusOne,aRaisedToThePOverTwoPlusOne) = ((guess.Pow((period / 2L)) - 1L), (guess.Pow((period / 2L)) + 1L));
#line 283 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            if (((aRaisedToThePOverTwoPlusOne % numberToFactor) == 0L))
            {
#line 284 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
                return -(2L);
            }

#line 287 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            var b0 = Microsoft__Quantum__Math__GreatestCommonDivisorI.Apply((numberToFactor, aRaisedToThePOverTwoPlusOne));
#line 290 "D:\\BWSI\\Exercises\\exercises\\QSharpExercises\\Lab9\\Lab9.qs"
            return b0;
        }

        ;
        public override void __Init__()
        {
            this.Microsoft__Quantum__Math__GreatestCommonDivisorI = this.__Factory__.Get<ICallable<(Int64,Int64), Int64>>(typeof(global::Microsoft.Quantum.Math.GreatestCommonDivisorI));
        }

        public override IApplyData __DataIn__((Int64,Int64,Int64) data) => new In(data);
        public override IApplyData __DataOut__(Int64 data) => new QTuple<Int64>(data);
        public static System.Threading.Tasks.Task<Int64> Run(IOperationFactory __m__, Int64 numberToFactor, Int64 guess, Int64 period)
        {
            return __m__.Run<Exercise5, (Int64,Int64,Int64), Int64>((numberToFactor, guess, period));
        }
    }
}